import Sigma.
import IIdMapping.
import Eq.
import Id.
import FixIndM.
import IFixIndM.
import FogFix.
import EnrFix.
import NatF.
import Nat.
import List.
import MemF.
import Mem.
import Ctx.
import Tp.
import RawF.
import Raw.
import TermF.
import Term.
module RawTermReuse2
  (Lookup : Π A : ★. A ➔ List · A ➔ Nat ➔ ★)
  
  (invZeroTail : ∀ A : ★. ∀ x : A. ∀ xs : List · A. Lookup · A x xs zero ➔ List · A)
  (invZeroEq : ∀ A : ★. ∀ x : A. ∀ xs : List · A. Π i : Lookup · A x xs zero.
    Eq · (List · A) xs (consL · A x (invZeroTail · A -x -xs i)))

  (invSucHead : ∀ A : ★. ∀ x : A. ∀ xs : List · A. ∀ n : Nat. Lookup · A x xs (suc n) ➔ A)
  (invSucTail : ∀ A : ★. ∀ x : A. ∀ xs : List · A. ∀ n : Nat. Lookup · A x xs (suc n) ➔ List · A)
  (invSucEq : ∀ A : ★. ∀ x : A. ∀ xs : List · A. ∀ n : Nat. Π i : Lookup · A x xs (suc n).
    Eq · (List · A) xs (consL · A (invSucHead · A -x -xs -n i) (invSucTail · A -x -xs -n i)))
  (invSucPred : ∀ A : ★. ∀ x : A. ∀ xs : List · A. ∀ n : Nat. Π i : Lookup · A x xs (suc n).
    Lookup · A x (invSucTail · A -x -xs -n i) n)

  (Typed : CtxTp ➔ Raw ➔ ★)
  
  (invVarLookup : ∀ G : Ctx. ∀ A : Tp. ∀ n : Nat. Typed (pairCtxTp G A) (var n)
    ➔ Lookup · Tp A G n)

  (invLamDom : ∀ GC : CtxTp. ∀ b : Raw. Typed GC (lam b) ➔ Tp)
  (invLamCod : ∀ GC : CtxTp. ∀ b : Raw. Typed GC (lam b) ➔ Tp)
  (invLamEq : ∀ GC : CtxTp. ∀ b : Raw. Π p : Typed GC (lam b).
    {projTp GC ≃ Arr (invLamDom -GC -b p) (invLamCod -GC -b p)})
  (invLamBod : ∀ GC : CtxTp. ∀ b : Raw. Π p : Typed GC (lam b).
    Typed (pairCtxTp (ext (projCtx GC) (invLamDom -GC -b p)) (invLamCod -GC -b p)) b)

  (invAppDom : ∀ GB : CtxTp. ∀ f : Raw. ∀ a : Raw. Typed GB (app f a) ➔ Tp)
  (invAppFun : ∀ GB : CtxTp. ∀ f : Raw. ∀ a : Raw. Π p : Typed GB (app f a).
    Typed (pairCtxTp (projCtx GB) (Arr (invAppDom -GB -f -a p) (projTp GB))) f)
  (invAppArg : ∀ GB : CtxTp. ∀ f : Raw. ∀ a : Raw. Π p : Typed GB (app f a).
    Typed (pairCtxTp (projCtx GB) (invAppDom -GB -f -a p)) a)
.

nf2ifP ◂ ∀ A : ★. ∀ x : A. ∀ Y : ★. ∀ X : List · A ➔ ★.
  Π c1 : Id · Y · Nat.
  Π c2 : IdDep · Y · (λ n : Y. ∀ xs : List · A. Lookup · A x xs (elimId · Y · Nat c1 n) ➾ X xs).
  IdDep · (NatF · Y) · (λ n : NatF · Y. ∀ xs : List · A.
    Lookup · A x xs (inNat (elimId · (NatF · Y) · (NatF · Nat) (imapN · Y · Nat c1) n))
    ➾ MemF · A x · X xs)
  = Λ A. Λ x. Λ Y. Λ X. λ c1. λ c2.
  ●
.

n2iP ◂ ∀ A : ★. ∀ x : A. IdDep · Nat · (λ n : Nat. ∀ xs : List · A. Lookup · A x xs n ➾ Mem · A x xs)
  = Λ A. Λ x. fix2ifixP · NatF · (List · A) · (MemF · A x)
  imapN (imapMem · A -x) · (Lookup · A x) (nf2ifP · A -x).

rf2tfP ◂ ∀ Y : ★. ∀ X : CtxTp ➔ ★.
  Π c1 : Id · Y · Raw.
  Π c2 : IdDep · Y · (λ y : Y. ∀ GA : CtxTp. Typed GA (elimId · Y · Raw c1 y) ➾ X GA).
  IdDep · (RawF · Y) · (λ ys : RawF · Y. ∀ GA : CtxTp.
    Typed GA (inRaw (elimId · (RawF · Y) · (RawF · Raw) (imapRaw · Y · Raw c1) ys))
    ➾ TermF · X GA)
  = Λ Y. Λ X. λ c1. λ c2. elimRawF · Y
  · (IdDepCod · (RawF · Y) · (λ ys : RawF · Y. ∀ GA : CtxTp.
    Typed GA (inRaw (elimId · (RawF · Y) · (RawF · Raw) (imapRaw · Y · Raw c1) ys))
    ➾ TermF · X GA))
  (λ n. pairId · (RawF · Y) · (∀ GA : CtxTp. Typed GA (var n) ➾ TermF · X GA)
    -(varF · Y n)
    (Λ GA. Λ p.
      ρ (etaCtxTp GA) -
      ivarF · X -(projCtx GA) -(projTp GA) n
    )
    β)
  (λ y. pairId · (RawF · Y) · (∀ GA : CtxTp. Typed GA (lam (elimId · Y · Raw c1 y)) ➾ TermF · X GA)
    -(lamF · Y y)
    (Λ GC. Λ p.
      ρ (etaCtxTp GC) -
      ρ (invLamEq -GC -(elimId · Y · Raw c1 y) p) -
      ilamF · X -(projCtx GC) -(invLamDom -GC -(elimId · Y · Raw c1 y) p) -(invLamCod -GC -(elimId · Y · Raw c1 y) p)
        (elimIdDep · Y · (λ y : Y. ∀ GA : CtxTp. Typed GA (elimId · Y · Raw c1 y) ➾ X GA)
          c2 y
          -(pairCtxTp (ext (projCtx GC) (invLamDom -GC -(elimId · Y · Raw c1 y) p)) (invLamCod -GC -(elimId · Y · Raw c1 y) p))
          -(invLamBod -GC -(elimId · Y · Raw c1 y) p)
        )
    )
    β
  )
  (λ y1. λ y2. pairId · (RawF · Y) · (∀ GA : CtxTp. Typed GA (app (elimId · Y · Raw c1 y1) (elimId · Y · Raw c1 y2)) ➾ TermF · X GA)
    -(appF · Y y1 y2)
    (Λ GB. Λ p.
      ρ (etaCtxTp GB) -
      iappF · X -(projCtx GB) -(invAppDom -GB -(elimId · Y · Raw c1 y1) -(elimId · Y · Raw c1 y2) p) -(projTp GB)
        (elimIdDep · Y · (λ y : Y. ∀ GA : CtxTp. Typed GA (elimId · Y · Raw c1 y) ➾ X GA)
          c2 y1
          -(pairCtxTp (projCtx GB) (Arr (invAppDom -GB -(elimId · Y · Raw c1 y1) -(elimId · Y · Raw c1 y2) p) (projTp GB)))
          -(invAppFun -GB -(elimId · Y · Raw c1 y1) -(elimId · Y · Raw c1 y2) p)
        )
        (elimIdDep · Y · (λ y : Y. ∀ GA : CtxTp. Typed GA (elimId · Y · Raw c1 y) ➾ X GA)
          c2 y2
          -(pairCtxTp (projCtx GB) (invAppDom -GB -(elimId · Y · Raw c1 y1) -(elimId · Y · Raw c1 y2) p))
          -(invAppArg -GB -(elimId · Y · Raw c1 y1) -(elimId · Y · Raw c1 y2) p)
        )
    )
    β
  )
.

r2tP ◂ IdDep · Raw · (λ t : Raw. ∀ GA : CtxTp. Typed GA t ➾ Term GA)
  = fix2ifixP · RawF · CtxTp · TermF imapRaw imapTerm · Typed rf2tfP.

