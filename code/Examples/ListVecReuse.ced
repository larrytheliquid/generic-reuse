import Unit.
import Sigma.
import IIdMapping.
import Eq.
import Id.
import Aux.
import FixIndM.
import IFixIndM.
import FogFix.
import EnrFix.
import Nat.
import ListF.
import List.
import VecF.
import Vec.
module ListVecReuse.

vf2lf ◂ ∀ A : ★. ∀ X : Nat ➔ ★. ∀ Y :  ★. 
  Π c : ∀ n : Nat. Id · (X n) · Y.
  ∀ n : Nat. Id · (VecF · A · X n) · (ListF · A · Y) 
  = Λ A. Λ X. Λ Y. λ c. elimVecF · A · X
  · (λ n : Nat. IdCod · (VecF · A · X n) · (ListF · A · Y))
  (pairId · (VecF · A · X zero) · (ListF · A · Y) -(nilVF · A · X) (nilLF · A · Y) β)
  (Λ m. λ a. λ x. pairId · (VecF · A · X (suc m)) · (ListF · A · Y)
    -(consVF · A · X -m a x) (consLF · A · Y a (elimId · (X m) · Y (c -m) x)) β).

v2l ◂ ∀ A : ★. ∀ n : Nat. Id · (Vec · A n) · (List · A)
  = Λ A. Λ n. ifix2fix · Nat · (VecF · A) · (ListF · A)
  (imapV · A) (imapL · A) (vf2lf · A) -n.
v2l! ◂ ∀ A : ★. ∀ n : Nat. Vec · A n ➔ List · A
  = Λ A. Λ n. elimId · (Vec · A n) · (List · A) (v2l · A -n).

lf2vf ◂ ∀ A : ★. ∀ Y : ★. ∀ X : Nat ➔ ★.
  Π r : Y ➔ Nat. 
  Π c : IdDep · Y · (λ y : Y . X (r y)).
  IdDep · (ListF · A · Y) · (λ xs : ListF · A · Y . VecF · A · X (lenAlgM · A · Y r xs))
  = Λ A. Λ Y. Λ X. λ r. λ c. elimListF · A · Y
  · (IdDepCod · (ListF · A · Y) · (λ xs : ListF · A · Y . VecF · A · X (lenAlgM · A · Y r xs)))
  (pairId · (ListF · A · Y) · (VecF · A · X zero) -(nilLF · A · Y) (nilVF · A · X) β)
  (λ a. λ y. pairId · (ListF · A · Y) · (VecF · A · X (lenAlgM · A r (consLF · A · Y a y)))
    -(consLF · A · Y a y) (consVF · A · X -(r y) a (elimIdDep · Y · (λ y : Y . X (r y)) c y)) β).
 
l2v ◂ ∀ A : ★. IdDep · (List · A) · (λ xs : List · A. Vec · A (len · A xs))
  = Λ A. fix2ifix · (ListF · A) · Nat · (VecF · A)
  (imapL · A) (imapV · A) (lenAlgM · A) (lf2vf · A).
l2v! ◂ ∀ A : ★. Π xs : List · A. Vec · A (len · A xs)
  = Λ A. elimIdDep · (List · A) · (λ xs : List · A. Vec · A (len · A xs)) (l2v · A).

VecP ◂ Π A : ★. Nat ➔ List · A ➔ ★ = λ A : ★. λ n : Nat. λ xs : List · A. {len xs ≃ n} ➾ Vec · A n.
l2vP ◂ ∀ A : ★. ∀ n : Nat. IdDep · (List · A) · (VecP · A n)
  = Λ A. Λ n. subst
  · (List · A) · Nat · (Vec · A) -(len · A)
  -n (l2v · A).
l2vP! ◂ ∀ A : ★. ∀ n : Nat. Π xs : List · A. VecP · A n xs
  = Λ A. Λ n. elimIdDep · (List · A) · (VecP · A n) (l2vP · A -n).
