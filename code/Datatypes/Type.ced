module Type.

import Id.
import IIdMapping.
import FixIndM.
import TypeF.
import IFixM.
import Unit.

Type ◂ ★ = FixIndM · TypeF imapT.
base ◂ Type = inFixIndM · TypeF -imapT (baseF · Type).
arr ◂ Type ➔ Type ➔ Type = λ A. λ B. inFixIndM · TypeF -imapT (arrF · Type A B).

elimType ◂ ∀ P : Type ➔ ★. P base ➔ (Π A : Type. P A ➔ Π B : Type. P B ➔ P (arr A B)) ➔ Π A : Type. P A
  = Λ P. λ pB. λ pA. indFixIndM · TypeF -imapT · P
  (Λ R. Λ c. λ ih. elimTypeF · R
    · (λ s : TypeF · R. P (inFixIndM · TypeF -imapT (elimId · (TypeF · R) · (TypeF · Type)
      (imapT · R · Type c) s)))
    pB
    (λ r1. λ r2. pA (elimId~ · R · Type -c r1) (ih r1) (elimId~ · R · Type -c r2) (ih r2))
  ).
foldType ◂ ∀ C : ★. C ➔ (Type ➔ C ➔ Type ➔ C ➔ C) ➔ Type ➔ C
  = Λ C. elimType · (λ A : Type. C).

