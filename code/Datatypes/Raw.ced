module Raw.
import Id.
import IIdMapping.
import FixIndM.
import RawF.
import Nat.
import Tp.
import IFixM.

Raw ◂ ★ = FixIndM · RawF imapRaw.
inRaw ◂ RawF · Raw ➔ Raw
  = inFixIndM · RawF -imapRaw.
var ◂ Nat ➔ Raw = λ n. inRaw (varF · Raw n).
lam ◂ Tp ➔ Raw ➔ Raw = λ A. λ b. inRaw (lamF · Raw A b).
app ◂ Raw ➔ Raw ➔ Raw = λ f. λ a. inRaw (appF · Raw f a).

elimRaw ◂ ∀ P : Raw ➔ ★.
  Π pV : Π n : Nat. P (var n).
  Π pL : Π A : Tp. Π b : Raw. P b ➔ P (lam A b).
  Π pA : Π f : Raw. P f ➔ Π a : Raw. P a ➔ P (app f a).
  Π t : Raw. P t
  = Λ P. λ pV. λ pL. λ pA. indFixIndM · RawF -imapRaw · P
  (Λ R. Λ c. λ ih. elimRawF · R
    · (λ s : RawF · R. P (inRaw (elimId · (RawF · R) · (RawF · Raw)
      (imapRaw · R · Raw c) s)))
    pV
    (λ A. λ r. pL A (elimId~ · R · Raw -c r) (ih r))
    (λ r1. λ r2. pA (elimId~ · R · Raw -c r1) (ih r1) (elimId~ · R · Raw -c r2) (ih r2))
  ).
foldRaw ◂ ∀ C : ★. (Nat ➔ C) ➔ (Tp ➔ Raw ➔ C ➔ C) ➔ (Raw ➔ C ➔ Raw ➔ C ➔ C) ➔ Raw ➔ C
  = Λ C. elimRaw · (λ n : Raw. C).

