module Tp.

import Id.
import IIdMapping.
import FixIndM.
import TpF.
import IFixM.
import Unit.

Tp ◂ ★ = FixIndM · TpF imapTp.
Base ◂ Tp = inFixIndM · TpF -imapTp (BaseF · Tp).
Arr ◂ Tp ➔ Tp ➔ Tp = λ A. λ B. inFixIndM · TpF -imapTp (ArrF · Tp A B).

elimTp ◂ ∀ P : Tp ➔ ★. P Base ➔ (Π A : Tp. Π B : Tp. P A ➔ P B ➔ P (Arr A B)) ➔ Π A : Tp. P A
  = Λ P. λ pB. λ pA. indFixIndM · TpF -imapTp · P
  (Λ R. Λ c. λ ih. elimTpF · R
    · (λ s : TpF · R. P (inFixIndM · TpF -imapTp (elimId · (TpF · R) · (TpF · Tp)
      (imapTp · R · Tp c) s)))
    pB
    (λ r1. λ r2. pA (elimId~ · R · Tp -c r1) (elimId~ · R · Tp -c r2) (ih r1) (ih r2))
  ).
foldTp ◂ ∀ C : ★. C ➔ (Tp ➔ Tp ➔ C ➔ C ➔ C) ➔ Tp ➔ C
  = Λ C. elimTp · (λ n : Tp. C).

