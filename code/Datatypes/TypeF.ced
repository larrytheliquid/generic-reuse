module TypeF.

import Id.
import Sigma.
import IIdMapping.

TypeFC ◂ ★ ➔ ★ = λ X : ★. ∀ C : ★. C ➔ (X ➔ X ➔ C) ➔ C.
baseFC ◂ ∀ X : ★. TypeFC · X
 = Λ X. Λ C. λ cB. λ cA. cB.
arrFC ◂ ∀ X : ★. X ➔ X ➔ TypeFC · X
 = Λ X. λ x1. λ x2. Λ C. λ cB. λ cA. cA x1 x2 .

TypeFI ◂ Π X : ★. TypeFC · X ➔ ★ 
 = λ X : ★. λ s : TypeFC · X. ∀ P : TypeFC · X ➔ ★. 
  P (baseFC · X) ➔ (Π x1 : X. Π x2 : X. P (arrFC · X x1 x2)) ➔ P s.
TypeF ◂ ★ ➔ ★ = λ X : ★. ι s : TypeFC · X. TypeFI · X s.
baseF ◂ ∀ X : ★. TypeF · X
 = Λ X. [baseFC · X, Λ P. λ pB. λ pA. pB].
arrF ◂ ∀ X : ★. X ➔ X ➔ TypeF · X
 = Λ X. λ x1. λ x2. [arrFC · X x1 x2, Λ P. λ pB. λ pA. pA x1 x2].

elimTypeF ◂ ∀ X : ★. ∀ P : TypeF · X ➔ ★.
 P (baseF · X) ➔ (Π x1 : X. Π x2 : X. P (arrF · X x1 x2)) ➔
 Π s : TypeF · X. P s
 = Λ X. Λ P. λ pB. λ pA. λ s. s.2 · (λ sC : TypeFC · X.
 ∀ C : ★. (Π s' : TypeF · X . {sC ≃ s'} ➾ P s' ➔ C) ➔ C) 
 (Λ C. λ p. p (baseF · X) -β pB)
 (λ x1. λ x2. Λ C. λ p. p (arrF · X x1 x2) -β (pA x1 x2))
 · (P s) (λ s'. Λ q. λ p. ρ q - p).
foldTypeF ◂ ∀ X : ★. ∀ C : ★.
 C ➔ (X ➔ X ➔ C) ➔ TypeF · X ➔ C
 = Λ X. Λ C. elimTypeF · X · (λ s : TypeF · X. C).

imapT ◂ IdMapping · (TypeF) 
 = Λ X. Λ Y. λ c. elimTypeF · X
 · (λ s : TypeF · X. IdCod · (TypeF · X) · (TypeF · Y) s)
 (pairId · (TypeF · X) · (TypeF · Y) -(baseF · X) (baseF · Y) β)
 (λ x1. λ x2. pairId · (TypeF · X) · (TypeF · Y)
  -(arrF · X x1 x2) (arrF · Y (elimId · X · Y c x1) (elimId · X · Y c x2)) β).

