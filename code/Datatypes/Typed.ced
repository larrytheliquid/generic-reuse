import Ctx.
import Tp.
import Nat.
import Raw.
import Term.
import Id.
import Sigma.
import Product.
import TermRawReuse.
import Lookup.
import Mem.
module Typed (infer : Π G : Ctx. ∀ A : Tp. Term (pairCtxTp G A) ➔ Sigma · Tp · (λ A' : Tp. {A' ≃ A})).

Typed ◂ CtxTp ➔ Raw ➔ ★
  = λ GA : CtxTp. λ t : Raw.
  Sigma · (Term GA) · (λ t' : Term GA. {t' ≃ t}).

termTyped' ◂ ∀ GA : CtxTp. Π t : Term GA. Typed GA (elimId · (Term GA) · Raw (t2r -GA) t)
  = Λ GA. λ t. pair · (Term GA) · (λ t' : Term GA. {t' ≃ t}) t β.
termTyped ◂ Π GA : CtxTp. Π t : Term GA. Typed GA (elimId · (Term GA) · Raw (t2r -GA) t)
  = λ GA. termTyped' -GA.

isVar ◂ Raw ➔ Bool
  = foldRaw · Bool (λ n. true) (λ A. λ b. λ ih. false) (λ f. λ ihf. λ a. λ iha. false).
notVar ◂ Raw ➔ Bool
  = λ t. not (isVar t).
isLam ◂ Raw ➔ Bool
  = foldRaw · Bool (λ n. false) (λ A. λ b. λ ih. true) (λ f. λ ihf. λ a. λ iha. false).
notLam ◂ Raw ➔ Bool
  = λ t. not (isLam t).
isApp ◂ Raw ➔ Bool
  = foldRaw · Bool (λ n. false) (λ A. λ b. λ ih. false) (λ f. λ ihf. λ a. λ iha. true).
notApp ◂ Raw ➔ Bool
  = λ t. not (isApp t).

projVar ◂ ∀ n : Nat. Π t : Raw. {t ≃ var n} ➔ Nat
  = Λ n. elimRaw · (λ t : Raw. {t ≃ var n} ➔ Nat)
  (λ n'. λ q. n')
  (λ A. λ b. λ ih. λ q. δ - χ {notVar (lam A b) ≃ notVar (var n)} - ρ q - β)
  (λ f. λ ihf. λ a. λ iha. λ q. δ - χ {notVar (app f a) ≃ notVar (var n)} - ρ q - β)
.

projVar' ◂ Nat ➔ Raw ➔ Nat
  = λ n. foldRaw · Nat
  (λ n'. n')
  (λ A. λ b. λ ih. n)
  (λ f. λ ihf. λ a. λ iha. n)
.

invPair1 ◂ ∀ A : ★. ∀ B : ★. ∀ a : A. ∀ a' : A. ∀ b : B. ∀ b' : B.
  {pair a b ≃ pair a' b'} ➔ {a ≃ a'}
  = Λ A. Λ B. Λ a. Λ a'. Λ b. Λ b'. λ q.
  χ {proj1 (pair a b) ≃ proj1 (pair a' b')} -
  ρ q - β.

invPair2 ◂ ∀ A : ★. ∀ B : ★. ∀ a : A. ∀ a' : A. ∀ b : B. ∀ b' : B.
  {pair a b ≃ pair a' b'} ➔ {b ≃ b'}
  = Λ A. Λ B. Λ a. Λ a'. Λ b. Λ b'. λ q.
  χ {proj2 (pair a b) ≃ proj2 (pair a' b')} -
  ρ q - β.

invCtxTp1 ◂ ∀ GA : CtxTp. ∀ G' : Ctx. ∀ A' : Tp.
  {GA ≃ pairCtxTp G' A'} ➔ {projCtx GA ≃ G'}
  = Λ GA. Λ G'. Λ A'. λ q. ρ q - β.

isArr ◂ Tp ➔ Bool
  = foldTp · Bool false (λ A. λ ihA. λ B. λ ihB. true).
notArr ◂ Tp ➔ Bool = λ A. not (isArr A).

projDom ◂ ∀ A : Tp. ∀ b : Raw. Π t : Raw. {t ≃ lam A b} ➾ Tp
  = Λ A. Λ b. elimRaw · (λ t : Raw. {t ≃ lam A b} ➾ Tp)
  (λ n. Λ q. δ - χ {notLam (var n) ≃ notLam (lam A b)} - ρ q - β)
  (λ A. λ b. λ ih. Λ q. A)
  (λ f. λ ihf. λ a. λ iha. Λ q. δ - χ {notLam (app f a) ≃ notLam (lam A b)} - ρ q - β)
.

projBod ◂ ∀ A : Tp. ∀ b : Raw. Π t : Raw. {t ≃ lam A b} ➾ Raw
  = Λ A. Λ b. elimRaw · (λ t : Raw. {t ≃ lam A b} ➾ Raw)
  (λ n. Λ q. δ - χ {notLam (var n) ≃ notLam (lam A b)} - ρ q - β)
  (λ A. λ b. λ ih. Λ q. b)
  (λ f. λ ihf. λ a. λ iha. Λ q. δ - χ {notLam (app f a) ≃ notLam (lam A b)} - ρ q - β)
.

projFun ◂ ∀ f : Raw. ∀ a : Raw. Π t : Raw. {t ≃ app f a} ➾ Raw
  = Λ f. Λ a. elimRaw · (λ t : Raw. {t ≃ app f a} ➾ Raw)
  (λ n. Λ q. δ - χ {notApp (var n) ≃ notApp (app f a)} - ρ q - β)
  (λ A. λ b. λ ih. Λ q. δ - χ {notApp (lam A b) ≃ notApp (app f a)} - ρ q - β)
  (λ f. λ ihf. λ a. λ iha. Λ q. f)
.

projArg ◂ ∀ f : Raw. ∀ a : Raw. Π t : Raw. {t ≃ app f a} ➾ Raw
  = Λ f. Λ a. elimRaw · (λ t : Raw. {t ≃ app f a} ➾ Raw)
  (λ n. Λ q. δ - χ {notApp (var n) ≃ notApp (app f a)} - ρ q - β)
  (λ A. λ b. λ ih. Λ q. δ - χ {notApp (lam A b) ≃ notApp (app f a)} - ρ q - β)
  (λ f. λ ihf. λ a. λ iha. Λ q. a)
.


invILamLam1 ◂ ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp. Π b : Term (pairCtxTp (ext G A) B). Π A' : Tp. Π b' : Raw. {ilam A b ≃ lam A' b'} ➔ {A ≃ A'}
  = Λ G. Λ A. Λ B. λ b. λ A'. λ b'. λ q. χ {projDom (ilam A b) ≃ projDom (lam A' b')} - ρ q - β.

invILamLam2 ◂ ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp. Π b : Term (pairCtxTp (ext G A) B). Π A' : Tp. Π b' : Raw. {ilam A b ≃ lam A' b'} ➔ {b ≃ b'}
  = Λ G. Λ A. Λ B. λ b. λ A'. λ b'. λ q. χ {projBod (ilam A b) ≃ projBod (lam A' b')} - ρ q - β.

invIAppApp1 ◂ ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp.
  Π f : Term (pairCtxTp G (Arr A B)). Π a : Term (pairCtxTp G A).
  Π f' : Raw. Π a' : Raw. {iapp f a ≃ app f' a'} ➔ {f ≃ f'}
  = Λ G. Λ A. Λ B. λ f. λ a. λ f'. λ a'. λ q. χ {projFun (iapp f a) ≃ projFun (app f' a')} - ρ q - β.

invIAppApp2 ◂ ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp.
  Π f : Term (pairCtxTp G (Arr A B)). Π a : Term (pairCtxTp G A).
  Π f' : Raw. Π a' : Raw. {iapp f a ≃ app f' a'} ➔ {a ≃ a'}
  = Λ G. Λ A. Λ B. λ f. λ a. λ f'. λ a'. λ q. χ {projArg (iapp f a) ≃ projArg (app f' a')} - ρ q - β.

projArrCod ◂ ∀ A : Tp. ∀ B : Tp. Π C : Tp. {C ≃ Arr A B} ➔ Tp
  = Λ A. Λ B. elimTp · (λ C : Tp. {C ≃ Arr A B} ➔ Tp)
  (λ q. δ - χ {notArr Base ≃ notArr (Arr A B)} - ρ q - β)
  (λ A'. λ ihA. λ B'. λ ihB. λ q. B')
.

projPairCod ◂ ∀ G : Ctx. ∀ A : Tp. ∀ B : Tp. Π GC : CtxTp. {GC ≃ pair G (Arr A B)} ➔ Tp
  = Λ G. Λ A. Λ B. elimProd · Ctx · Tp · (λ GC : CtxTp. {GC ≃ pair G (Arr A B)} ➔ Tp)
  (λ G'. λ C. λ q. projArrCod -A -B C (invPair2 · Ctx · Tp -G' -G -C -(Arr A B) q)
  )
.

invIVarVar ◂ ∀ A : Tp. ∀ G : Ctx. Π i : Mem · Tp A G. Π n : Nat. {ivar i ≃ var n} ➔ {i ≃ n}
  = Λ A. Λ G. λ i. λ n. λ q. χ {projVar' n (ivar i) ≃ projVar' n (var n)} - ρ q - β.

invVarLookup ◂ Π G : Ctx. Π A : Tp. Π n : Nat. Typed (pairCtxTp G A) (var n) ➔ Lookup · Tp A G n
  = λ G. λ A. λ n. foldSigma · (Term (pairCtxTp G A)) · (λ t : Term (pairCtxTp G A). {t ≃ var n}) · (Lookup · Tp A G n)
  (λ t. elimTerm · (λ GA : CtxTp. λ t : Term GA . { t ≃ var n } ➔ Lookup · Tp (projTp GA) (projCtx GA) n)
    (Λ G. Λ A. λ i. λ q. pair · (Mem · Tp A G) · (λ i : Mem · Tp A G. {i ≃ n}) i (invIVarVar -A -G i n q))
    (Λ G. λ A. Λ B. λ b. λ _. λ q. δ - χ {notVar (ilam A b) ≃ notVar (var n)} - ρ q - β)
    (Λ G. Λ A. Λ B. λ f. λ _. λ a. λ _. λ q. δ - χ {notVar (iapp f a) ≃ notVar (var n)} - ρ q - β)
    -(pairCtxTp G A) t
  )
.

invLamCod ◂ Π GC : CtxTp. Π A : Tp. Π b : Raw. Typed GC (lam A b) ➔ Tp
  = λ GC. λ A. λ b. foldSigma · (Term GC) · (λ t : Term GC. {t ≃ lam A b}) · Tp
  (λ t. elimTerm · (λ GC : CtxTp. λ t : Term GC . Π GC' : CtxTp. {GC' ≃ GC} ➔ { t ≃ lam A b } ➔ Tp)
    (Λ G'. Λ A'. λ i. λ GC'. λ q1. λ q2. δ - χ {notLam (ivar i) ≃ notLam (lam A b)} - ρ q2 - β)
    (Λ G'. λ A'. Λ B'. λ b'. λ _. λ GC'. λ q1. λ q2. projPairCod -G' -A' -B' GC' q1)
    (Λ G'. Λ A'. Λ B'. λ f. λ _. λ a. λ _. λ GC'. λ q1. λ q2. δ - χ {notLam (iapp f a) ≃ notLam (lam A b)} - ρ q2 - β)
    -GC t GC β
  )
.

invLamEq ◂ Π GC : CtxTp. Π A : Tp. Π b : Raw. Π p : Typed GC (lam A b).
  {projTp GC ≃ Arr A (invLamCod GC A b p)}
  = λ GC. λ A. λ b. elimSigma · (Term GC) · (λ t : Term GC. {t ≃ lam A b})
  · (λ p : Typed GC (lam A b). {projTp GC ≃ Arr A (invLamCod GC A b p)})
  (elimTerm · (λ GC : CtxTp. λ t : Term GC . Π q : { t ≃ lam A b }. { projTp GC ≃ Arr A (invLamCod GC A b (pair t q)) })
    (Λ G'. Λ A'. λ i. λ q. δ - χ {notLam (ivar i) ≃ notLam (lam A b)} - ρ q - β)
    (Λ G'. λ A'. Λ B'. λ b'. λ _. λ q. ρ (invILamLam1 -G' -A' -B' b' A b q) - β)
    (Λ G'. Λ A'. Λ B'. λ f. λ _. λ a. λ _. λ q. δ - χ {notLam (iapp f a) ≃ notLam (lam A b)} - ρ q - β)
    -GC
  )
.

invLamBod ◂ Π GC : CtxTp. Π A : Tp. Π b : Raw. Π p : Typed GC (lam A b).
  Typed (pairCtxTp (ext (projCtx GC) A) (invLamCod GC A b p)) b
  = λ GC. λ A. λ b. elimSigma · (Term GC) · (λ t : Term GC. {t ≃ lam A b})
  · (λ p : Typed GC (lam A b). Typed (pairCtxTp (ext (projCtx GC) A) (invLamCod GC A b p)) b)
  (elimTerm · (λ GC : CtxTp. λ t : Term GC . Π q : { t ≃ lam A b }.
    Typed (pairCtxTp (ext (projCtx GC) A) (invLamCod GC A b (pair · (Term GC) · (λ t : Term GC. { t ≃ lam A b }) t q))) b)
    (Λ G'. Λ A'. λ i. λ q. δ - χ {notLam (ivar i) ≃ notLam (lam A b)} - ρ q - β)
    (Λ G'. λ A'. Λ B'. λ b'. λ _. λ q.
      ρ ς (invILamLam1 -G' -A' -B' b' A b q) -
      ρ ς (invILamLam2 -G' -A' -B' b' A b q) -
      (termTyped' -(pairCtxTp (ext G' A') B') b')
    )
    (Λ G'. Λ A'. Λ B'. λ f. λ _. λ a. λ _. λ q. δ - χ {notLam (iapp f a) ≃ notLam (lam A b)} - ρ q - β)
    -GC
  )
.

TpEq ◂ Tp ➔ ★ = λ A : Tp. Sigma · Tp · (λ A' : Tp. {A' ≃ A}).
projTpEq1 ◂ ∀ A : Tp. TpEq A ➔ Tp = Λ A. proj1 · Tp · (λ A' : Tp. {A' ≃ A}).
projTpEq2 ◂ ∀ A : Tp. Π s : TpEq A. {projTpEq1 s ≃ A} = Λ A. proj2 · Tp · (λ A' : Tp. {A' ≃ A}).

invAppDom ◂ Π GB : CtxTp. Π f : Raw. Π a : Raw. Typed GB (app f a) ➔ Tp
  = λ GB. λ f. λ a. foldSigma · (Term GB) · (λ t : Term GB. {t ≃ app f a}) · Tp
  (λ t. elimTerm · (λ GB : CtxTp. λ t : Term GB . Π GB' : CtxTp. {GB' ≃ GB} ➔ { t ≃ app f a } ➔ Tp)
    (Λ G'. Λ A'. λ i. λ GB'. λ q1. λ q2. δ - χ {notApp (ivar i) ≃ notApp (app f a)} - ρ q2 - β)
    (Λ G'. λ A'. Λ B'. λ b'. λ _. λ GB'. λ q1. λ q2. δ - χ {notApp (ilam A' b') ≃ notApp (app f a)} - ρ q2 - β)
    (Λ G'. Λ A'. Λ B'. λ f'. λ _. λ a'. λ _. λ GB'. λ q1. λ q2.
      projTpEq1 -A' (infer (projCtx GB') -A' (ρ (invCtxTp1 -GB' -G' -B' q1) - a'))
    )
    -GB t GB β
  )
.

invAppFun ◂ Π GB : CtxTp. Π f : Raw. Π a : Raw. Π p : Typed GB (app f a).
  Typed (pairCtxTp (projCtx GB) (Arr (invAppDom GB f a p) (projTp GB))) f
  = λ GB. λ f. λ a. elimSigma · (Term GB) · (λ t : Term GB. {t ≃ app f a})
  · (λ p : Typed GB (app f a). Typed (pairCtxTp (projCtx GB) (Arr (invAppDom GB f a p) (projTp GB))) f)
  (λ t. elimTerm · (λ GB : CtxTp. λ t : Term GB. Π GB' : CtxTp. {GB' ≃ GB} ➔ Π q : { t ≃ app f a }.
    Typed (pairCtxTp (projCtx GB) (Arr (invAppDom GB f a (pair · (Term GB) · (λ t : Term GB. { t ≃ app f a }) t q)) (projTp GB))) f)
    (Λ G'. Λ A'. λ i. λ GB'. λ q1. λ q2. δ - χ {notApp (ivar i) ≃ notApp (app f a)} - ρ q2 - β)
    (Λ G'. λ A'. Λ B'. λ b'. λ _. λ GB'. λ q1. λ q2. δ - χ {notApp (ilam A' b') ≃ notApp (app f a)} - ρ q2 - β)
    (Λ G'. Λ A'. Λ B'. λ f'. λ _. λ a'. λ _. λ GB'. λ q1. λ q2.
      ρ ς (invIAppApp1 -G' -A' -B' f' a' f a q2) -
      ρ ς (invCtxTp1 -GB' -G' -B' q1) -
      ρ (projTpEq2 -A' (infer (projCtx GB') -A' (ρ (invCtxTp1 -GB' -G' -B' q1) - a'))) -
      ρ (invCtxTp1 -GB' -G' -B' q1) -
      (termTyped' -(pairCtxTp G' (Arr A' B')) f')
    )
    -GB t GB β
  )
.

invAppArg ◂ Π GB : CtxTp. Π f : Raw. Π a : Raw. Π p : Typed GB (app f a).
  Typed (pairCtxTp (projCtx GB) (invAppDom GB f a p)) a
  = λ GB. λ f. λ a. elimSigma · (Term GB) · (λ t : Term GB. {t ≃ app f a})
  · (λ p : Typed GB (app f a). Typed (pairCtxTp (projCtx GB) (invAppDom GB f a p)) a)
  (λ t. elimTerm · (λ GB : CtxTp. λ t : Term GB. Π GB' : CtxTp. {GB' ≃ GB} ➔ Π q : { t ≃ app f a }.
    Typed (pairCtxTp (projCtx GB) (invAppDom GB f a (pair · (Term GB) · (λ t : Term GB. { t ≃ app f a }) t q))) a)
    (Λ G'. Λ A'. λ i. λ GB'. λ q1. λ q2. δ - χ {notApp (ivar i) ≃ notApp (app f a)} - ρ q2 - β)
    (Λ G'. λ A'. Λ B'. λ b'. λ _. λ GB'. λ q1. λ q2. δ - χ {notApp (ilam A' b') ≃ notApp (app f a)} - ρ q2 - β)
    (Λ G'. Λ A'. Λ B'. λ f'. λ _. λ a'. λ _. λ GB'. λ q1. λ q2.
      ρ ς (invIAppApp2 -G' -A' -B' f' a' f a q2) -
      ρ ς (invCtxTp1 -GB' -G' -B' q1) -
      ρ (projTpEq2 -A' (infer (projCtx GB') -A' (ρ (invCtxTp1 -GB' -G' -B' q1) - a'))) -
      ρ (invCtxTp1 -GB' -G' -B' q1) -
      (termTyped' -(pairCtxTp G' A') a')
    )
    -GB t GB β
  )
.

{-
infer ◂ Π G : Ctx. ∀ A : Tp. Term (pairCtxTp G A) ➔ Sigma · Tp · (λ A' : Tp. {A' ≃ A})
  = λ G. Λ A. λ t. elimTerm
  · (λ GA : CtxTp. λ _ : Term GA. Π G' : Ctx. {G' ≃ projCtx GA} ➾ Sigma · Tp · (λ A' : Tp. {A' ≃ projTp GA}))
  (Λ G. Λ A. λ i. λ G'. Λ q. ●)
  (Λ G. λ A. Λ B. λ b. λ ih. λ G'. Λ q. pair
    · Tp · (λ C' : Tp. {C' ≃ Arr A B})
    (Arr A
      (proj1 · Tp · (λ B' : Tp. {B' ≃ B}) (ih (ext G' A) -(ρ q - β)))
    )
    (ρ (proj2 · Tp · (λ B' : Tp. {B' ≃ B}) (ih (ext G' A) -(ρ q - β))) - β)
  )
  (Λ G. Λ A. Λ B. λ f. λ ihf. λ a. λ iha. λ G'. Λ q. ●)
  -(pairCtxTp G A) t G -β
.
-}
