module Nat.
import Eq.

NatC ◂ ★ = ∀ X : ★. X ➔ (X ➔ X) ➔ X.
zeroC ◂ NatC = Λ X. λ cZ. λ cS. cZ.
sucC ◂ NatC ➔ NatC = λ n. Λ X. λ cZ. λ cS. cS (n · X cZ cS).

NatI ◂ NatC ➔ ★ = λ n : NatC. ∀ P : NatC ➔ ★. P zeroC ➔ (∀ n' : NatC. P n' ➔ P (sucC n')) ➔ P n.
Nat ◂ ★ = ι n : NatC. NatI n.
zeroI ◂ NatI zeroC = Λ P. λ pZ. λ pS. pZ.
sucI ◂ ∀ nC : NatC. Π n : NatI nC. NatI (sucC nC) =
  Λ nC. λ n. Λ P. λ pZ. λ pS. pS -nC (n · P pZ pS).

zero ◂ Nat = [zeroC, zeroI].
suc ◂ Nat ➔ Nat = λ n. [sucC n.1, sucI -n.1 n.2].

toNat ◂ NatC ➔ Nat = λ n. n · Nat zero suc.
toNatId ◂ Π n : Nat. Eq · Nat (toNat n.1) n = λ n. n.2
  · (λ nC : NatC. HEq · Nat · NatC (toNat nC) nC)
  β (Λ mC. λ ih. ρ+ ih - β).

elimNat ◂ ∀ P : Nat ➔ ★. P zero ➔ (∀ n : Nat. P n ➔ P (suc n)) ➔ Π n : Nat. P n
  = Λ P. λ pZ. λ pS. λ n.
  ρ ς (toNatId n) -
  (n.2 · (λ nC : NatC. P (toNat nC))
    pZ (Λ mC. λ ih. pS -(toNat mC) ih)).

add ◂ Nat ➔ Nat ➔ Nat = λ m. λ n. m.1 · Nat n suc.

