module Sigma.
import Eq.

SigmaC ◂ Π A : ★. (A ➔ ★) ➔ ★ = λ A : ★. λ B : A ➔ ★.
  ∀ X : ★. (Π a : A. B a ➔ X) ➔ X.
pairC ◂ ∀ A : ★. ∀ B : A ➔ ★. Π a : A. B a ➔ SigmaC · A · B =
 Λ A. Λ B. λ a. λ b. Λ X. λ c. c a b.

SigmaI ◂ Π A : ★. Π B : A ➔ ★. SigmaC · A · B ➔ ★ =
  λ A : ★ . λ B : A ➔ ★. λ s : SigmaC · A · B.
  ∀ P : SigmaC · A · B ➔ ★. (Π a : A. Π b : B a. P (pairC · A · B a b)) ➔ P s.
pairI ◂ ∀ A : ★. ∀ B : A ➔ ★. Π a : A. Π b : B a. SigmaI · A · B (pairC · A · B a b) =
 Λ A. Λ B. λ a. λ b. Λ P. λ p. p a b.

Sigma ◂ Π A : ★. (A ➔ ★) ➔ ★ = λ A : ★. λ B : A ➔ ★.
  ι s : SigmaC · A · B. SigmaI · A · B s.
pair ◂ ∀ A : ★. ∀ B : A ➔ ★. Π a : A. Π b : B a. Sigma · A · B
  = Λ A. Λ B. λ a. λ b. [pairC · A · B a b, pairI · A · B a b].

toSigma ◂ ∀ A : ★. ∀ B : A ➔ ★. SigmaC · A · B ➔ Sigma · A · B
  = Λ A. Λ B. λ s. s · (Sigma · A · B) (pair · A · B).
toSigmaId ◂ ∀ A : ★. ∀ B : A ➔ ★. Π s : Sigma · A · B.
  Eq · (Sigma · A · B) (toSigma · A · B s.1) s
  = Λ A. Λ B. λ s. s.2 · (λ sC : SigmaC · A · B.
    HEq · (Sigma · A · B) · (SigmaC · A · B) (toSigma · A · B sC) sC)
  (λ a. λ b. β).

elimSigma ◂ ∀ A : ★. ∀ B : A ➔ ★. ∀ P : Sigma · A · B ➔ ★.
  (Π a : A. Π b : B a. P (pair · A · B a b)) ➔ Π s : Sigma · A · B. P s
  = Λ A. Λ B. Λ P. λ p. λ s.
  ρ ς (toSigmaId · A · B s) -
  (s.2 · (λ sC : SigmaC · A · B. P (toSigma · A · B sC)) p).

proj1 ◂ ∀ A : ★. ∀ B : A ➔ ★. Sigma · A · B  ➔  A 
 = Λ A. Λ B. λ s. s.1 · A (λ a. λ _. a).
proj2 ◂ ∀ A : ★. ∀ B : A ➔ ★. Π s : Sigma · A · B. B (proj1 · A · B s) 
 = Λ A. Λ B. λ s. elimSigma · A · B
 · (λ s' : Sigma · A · B. B (proj1 · A · B s')) (λ a. λ b. b) s.
