import Id.
module GenericReuse.Program.Examples.Sort
  (Nat : ★) (List : ★ ➔ ★) (Vec : ★ ➔ Nat ➔ ★)
  (len : ∀ A : ★. List · A ➔ Nat)
  (v2l : ∀ A : ★. ∀ n : Nat. Id · (Vec · A n) · (List · A))
  (v2l-pres : ∀ A : ★. ∀ n : Nat. Π xs : Vec · A n. {n ≃ len xs})
  (l2v : ∀ A : ★. IdDep · (List · A) · (λ xs : List · A. Vec · A (len · A xs)))
  (SortedL : Π A : ★. List · A ➔ ★)
  (SortedV : Π A : ★. Π n : Nat. Vec · A n ➔ ★)
  (sv2sl : ∀ A : ★. ∀ n : Nat. ∀ xs : Vec · A n.
    Id · (SortedV · A n xs) · (SortedL · A (elimId · (Vec · A n) · (List · A) (v2l · A -n) xs)))
  (sl2sv : ∀ A : ★. ∀ xs : List · A.
    Id · (SortedL · A xs) · (SortedV · A (len · A xs) (elimIdDep · (List · A) · (λ xs : List · A. Vec · A (len · A xs)) (l2v · A) xs)))
 .
import Combinators.

l2vP ◂ ∀ A : ★. ∀ n : Nat. IdDep · (List · A) · (λ xs : List · A. {len xs ≃ n} ➾ Vec · A n)
  = Λ A. Λ n. subst
  · (List · A) · Nat · (Vec · A) -(len · A)
  -n (l2v · A).

sortV2sortL ◂ Id
  · (∀ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n)
  · (∀ A : ★. List · A ➔ List · A)
  = copyType 
  · (λ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n)
  · (λ A : ★. List · A ➔ List · A)
  (Λ A. allArr2arr
  · Nat · (Vec · A) · (λ n : Nat. Vec · A n)
  · (List · A) · (List · A)
  (len · A) (l2v · A)
  (Λ n. v2l · A -n
  )).

sortedV2sortedL ◂
  ∀ sortV : (∀ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n). Id
  · (∀ A : ★. ∀ n : Nat. Π xs : Vec · A n. SortedV · A n (sortV · A -n xs))
  · (∀ A : ★. Π xs : List · A. SortedL · A
    (elimId · (∀ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n) · (∀ A : ★. List · A ➔ List · A) sortV2sortL sortV · A xs))
  = Λ sortV. copyType
  · (λ A : ★. ∀ n : Nat. Π xs : Vec · A n. SortedV · A n (sortV · A -n xs))
  · (λ A : ★. Π xs : List · A. SortedL · A
    (elimId · (∀ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n) · (∀ A : ★. List · A ➔ List · A) sortV2sortL sortV · A xs))
  (Λ A. allPi2pi
  · Nat · (Vec · A) · (λ n : Nat. λ xs : Vec · A n. SortedV · A n (sortV · A -n xs))
  · (List · A) · (λ xs : List · A. SortedL · A
    (elimId · (∀ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n) · (∀ A : ★. List · A ➔ List · A) sortV2sortL sortV · A xs))
  (len · A) (l2v · A) (Λ n. v2l · A -n)
  (Λ n. λ xs. sv2sl · A -n -(sortV · A -n xs)
  )).

SortL ◂ ★ = ∀ A : ★. List · A ➔ List · A.
SortVP ◂ SortL ➔ ★ = λ f : SortL.
  (∀ A : ★. Π xs : List · A. {len (f xs) ≃ len xs}) ➾
  ∀ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n.

sortL2sortV ◂ IdDep · SortL · SortVP
  = copyTypeP
  · (λ A : ★. List · A ➔ List · A)
  · (λ A : ★. λ f : List · A ➔ List · A.
    (Π xs : List · A. {len (f xs) ≃ len xs}))
  · (λ A : ★. ∀ n : Nat. Vec · A n ➔ Vec · A n)
  (Λ A. arr2allArrP
  · (List · A) · (List · A)
  · (λ xs : List · A. λ ys : List · A. {len ys ≃ len xs})
  · Nat · (Vec · A) · (λ n : Nat. Vec · A n)
  (len · A) (Λ n. v2l · A -n) (Λ n. v2l-pres · A -n)
  (λ xs. l2vP · A -(len · A xs)
  -- subst · (List · A) · Nat · (Vec · A) -(len · A) -(len · A xs) (l2v · A)
  )).

sortedL2sortedV ◂ ∀ sortL : ∀ A : ★. List · A ➔ List · A.
  ∀ sortPres : ∀ A : ★. Π xs : List · A. {len (sortL xs) ≃ len xs}. Id
  · (∀ A : ★. Π xs : List · A. SortedL · A (sortL · A xs))
  · (∀ A : ★. ∀ n : Nat. Π xs : Vec · A n. SortedV · A n (elimIdDep · SortL · SortVP sortL2sortV sortL -sortPres · A -n xs))
  = Λ sortL. Λ sortPres. copyType
  · (λ A : ★. Π xs : List · A. SortedL · A (sortL · A xs))
  · (λ A : ★. ∀ n : Nat. Π xs : Vec · A n. SortedV · A n (elimIdDep · SortL · SortVP sortL2sortV sortL -sortPres · A -n xs))
  (Λ A. pi2allPi
  · (List · A) · (λ xs : List · A. SortedL · A (sortL · A xs))
  · Nat · (Vec · A) · (λ n : Nat. λ xs : Vec · A n. SortedV · A n (elimIdDep · SortL · SortVP sortL2sortV sortL -sortPres · A -n xs))
  (len · A) (Λ n. v2l · A -n) (Λ n. v2l-pres · A -n) (l2v · A)
  (λ xs. ρ ς (sortPres · A xs) - (sl2sv · A -(sortL · A xs))
  )).




