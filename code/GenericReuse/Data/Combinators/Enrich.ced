module ReuseEnriching.
import Sigma.
import Id.
import IIdMapping.
import IFixM.
import IFixIndM.
import IInductionM.
import FixIndM.
import Unit.
import UnitLift.

jfix2ifix' ◂ ∀ I : ★. ∀ F : (I ➔ ★) ➔ (I ➔ ★). Π fimap : IIdMapping · I · F.
  ∀ J : ★. ∀ G : (J ➔ ★) ➔ (J ➔ ★). Π gimap : IIdMapping · J · G.
  Π alg : (∀ R : J ➔ ★. (∀ j : J. R j ➔ I) ➔ ∀ j : J. G · R j ➔ I).
  (∀ X : I ➔ ★. ∀ Y : J ➔ ★. Π f : ∀ j : J. Y j ➔ I. 
    (∀ j : J. IdDep · (Y j) · (λ y : Y j. X (f -j y)) ) ➔ ∀ j : J. IdDep · (G · Y j) · (λ gy : G · Y j. F · X (alg · Y f -j gy))) ➔
  ∀ j : J. Id · (IFixIndM · J · G gimap j)· 
  (ι gx : IFixIndM · J · G gimap j. IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j gx.1))
  =  Λ I. Λ F. λ fimap. Λ J. Λ G. λ gimap. λ alg. λ ifg. Λ j. λ v. 
  induction · J · G -gimap · (λ j : J. λ y : IFixIndM · J · G gimap j.  Sigma ·  (ι gx : IFixIndM · J · G gimap j. IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j gx.1)) · 
    (λ x : (ι gx : IFixIndM · J · G gimap j. IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j gx.1)).  {x ≃ y}) )
     (Λ R. Λ c. λ ih. Λ j. λ gr. 
     pair · (ι gx : IFixIndM · J · G gimap j. IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j gx.1)) · 
            (λ x : (ι gx : IFixIndM · J · G gimap j. IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j gx.1)).  {x ≃ iinFixIndM gr})  

  [ (iinFixIndM · J · G -gimap -j ((elimId~ · (G · R j) · (G · (IFixIndM · J · G gimap) j) -(gimap · R · (IFixIndM · J · G gimap) c -j) gr)))  
  , iinFixIndM · I · F -fimap -((ifoldM · J · G · (λ j : J. I) alg) -j (iinFixIndM · J · G -gimap -j ((elimId · (G · R j) · (G · (IFixIndM · J · G gimap) j) (gimap · R · (IFixIndM · J · G gimap) c -j) gr))).1)  (elimIdDep · (G · (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) j) 
                      · (λ grr : (G ·  (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) j).
                              F · (IFixIndM ·  I · F fimap) ((ifoldM · J · G · (λ j : J. I) alg) -j 
                                        (iinFixIndM · J · G -gimap -j  
                                               (elimId · (G · (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) j) · (G · (IFixIndM · J · G gimap) j) (gimap · (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) · (IFixIndM · J · G gimap) 
                                       (Λ j2. intrId · (ι gx : (IFixIndM · J · G gimap j2) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -j2 gx.1)) )
                                                      · (IFixIndM · J · G gimap j2) (λ v. v.1) (λ _. β)) -j) grr)).1 )) 
                                   (λ aa. ifg · (IFixIndM · I · F fimap)   
                                              · (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) 
                                               (Λ j3. λ v3. (ifoldM · J · G · (λ j' : J . I) alg -j3 v3.1.1))  (Λ j. λ a. pair · (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -j a.1.1) )    ·  (λ b : IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -j a.1.1). {b ≃ a}) a.2 β) -j aa) 
      (elimId · (G · R j) · (G · (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) j) 
          (gimap · R · (λ i : J. ι gx : (IFixIndM · J · G gimap i) .  (IFixIndM · I · F fimap (ifoldM · J · G · (λ j' : J . I) alg -i gx.1)) ) 
      ih
      -j) gr)) ] β) -j v.


jfix2ifix ◂ ∀ I : ★. ∀ F : (I ➔ ★) ➔ (I ➔ ★). Π fimap : IIdMapping · I · F.
  ∀ J : ★. ∀ G : (J ➔ ★) ➔ (J ➔ ★). Π gimap : IIdMapping · J · G.
  Π alg : IAlgM · J · G · (λ _ : J. I). 
  (∀ X : I ➔ ★. ∀ Y : J ➔ ★. Π f : ∀ j : J. Y j ➔ I. 
    (∀ j : J. IdDep · (Y j) · (λ y : Y j. X (f -j y))) ➔ 
    ∀ j : J. IdDep · (G · Y j) · (λ gy : G · Y j. F · X (alg · Y f -j gy))) ➔
  ∀ j : J. IdDep · (IFixIndM · J · G gimap j)
    · (λ v : (IFixIndM · J · G gimap j). IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j v.1))
  = Λ I. Λ F. λ fimap. Λ J. Λ G. λ gimap. λ alg. λ ifg. Λ j. λ v. pair
  · (IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j v.1)) 
  · (λ x : IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j v.1). {x ≃ v.1})
  (elimId · (IFixIndM · J · G gimap j) · (ι gx : IFixIndM · J · G gimap j. IFixIndM · I · F fimap ((ifoldM · J · G · (λ j : J. I) alg) -j gx.1))
    (jfix2ifix' · I · F fimap · J · G gimap alg ifg -j) v).2 β.

fix2ifix ◂ ∀ I : ★. ∀ F : (I ➔ ★) ➔ (I ➔ ★). Π fimap : IIdMapping · I · F.
  ∀ G : ★ ➔ ★. Π gimap : IdMapping · G.
  Π alg : AlgM · G · I. 
  (∀ X : I ➔ ★. ∀ Y : ★. Π f : Y ➔ I. IdDep · Y · (λ y : Y. X (f y)) ➔ IdDep · (G · Y) · (λ gy : G · Y. F · X (alg · Y f gy))) ➔
  IdDep · (FixIndM · G gimap) · (λ v : FixIndM · G gimap. IFixIndM · I · F fimap ((foldM · G -gimap · I alg) v))
  = Λ I. Λ F. λ fimap. Λ G. λ gimap. λ alg. λ ifg. λ v.
  jfix2ifix · I · F fimap · Unit · (UnitF · G) (ufimap · G gimap) (convAlg · G -gimap · I alg)   
  (Λ X. Λ Y. λ f. λ g. Λ j. λ a. pair · (F · X (convAlg · G -gimap · I alg · Y f -unit a)) · (λ b : F · X (convAlg · G -gimap · I alg · Y f -unit a) . { b ≃ a }) 
    (elimIdDep · (G · (Y unit)) · (λ a : (G · (Y unit)). F · X (alg · (Y unit) (f -unit)  a)) (ifg · X · (Y unit) (f -unit) (g -unit)) a) β) -unit v. 
