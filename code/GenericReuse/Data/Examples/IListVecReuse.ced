module ListVecReuse.

import Sigma.
import Unit.
import Nat.
import Id.
import IIdMapping.
import IFixIndM.
import Forget.
import Enrich.
import IListF.
import IList.
import VecF.
import Vec.


vf2lf ◂ ∀ A : ★. ∀ X : Nat ➔ ★. ∀ Y : Unit ➔ ★. 
 (∀ n : Nat. Id · (X n) · (Y unit)) ➔
 ∀ n : Nat. Id · (VecF · A · X n) · (ListF · A · Y unit) 
 = Λ A. Λ X. Λ Y. λ c. Λ n. λ v. pair · (ListF · A · Y unit) · (λ b : ListF · A · Y unit . {b ≃ v}) (v.1 · (ListF · A · Y unit) 
 (Λ p. in1lf · A · Y) (Λ m. Λ p. λ a. λ x. in2lf · A · Y a (elimId · (X m) · (Y unit) (c -m) x))) (rebVec · A · X -n v).

v2l ◂ ∀ A : ★. ∀ n : Nat. Id · (Vec · A n) · (List · A) = Λ A. Λ n. ifix2jfix · Nat · (VecF · A) (vfimap · A)
 · Unit · (ListF · A) (lfimap · A) (λ _. unit) (Λ X. Λ Y. λ c. Λ i. vf2lf · A · X · Y c -i) -n.

lf2vf ◂ ∀ A : ★. ∀ X : Nat ➔ ★. ∀ Y : Unit ➔ ★. 
 Π f : ∀ i : Unit. Y i ➔ Nat. 
 (IdDep · (Y unit) · (λ y : Y unit. X (f -unit y))) ➔ 
   IdDep · (ListF · A · Y unit) · (λ gy : ListF · A · Y unit. VecF · A · X (lenAlgM · A · Y f -unit gy))
 = Λ A. Λ X. Λ Y. λ f.  λ c. λ l. pair · (VecF · A · X (lenAlgM · A · Y f -unit l)) · (λ b : VecF · A · X (lenAlgM · A · Y f -unit l) . {b ≃ l}) 
  (ListFInd · A · Y l ·  (λ l : (ListF · A · Y unit). VecF · A · X (lenAlgM · A · Y f -unit l)) 
  (λ a. λ y. in2vf · A · X -(f -unit y) a (elimIdDep · (Y unit) · (λ y : Y unit. X (f -unit y)) c y)) (in1vf · A · X))  
  (rebList · A · Y l).

l2v ◂ ∀ A : ★. IdDep · (List · A) · (λ l : List · A. Vec · A (len · A l)) = Λ A. jfix2ifix · Nat · (VecF · A) (vfimap · A)
 · Unit · (ListF · A) (lfimap · A) (lenAlgM · A)  (Λ X. Λ Y. λ f. λ a. Λ j. lf2vf · A · X · Y f (a -unit)) -unit.
