@article{howard,
  title={The formulae-as-types notion of construction},
  author={Howard, William A},
  journal={To HB Curry: essays on combinatory logic, lambda calculus and formalism},
  volume={44},
  pages={479--490},
  year={1980}
}

@Article{diehl,
     author    = "Larry Diehl and Aaron Stump",
     title     = "{Zero-Cost Coercions for Program and Proof Reuse}",
     year      = "2018",
     eprint    = "1802.00787"
}

@phdthesis{lang:agda,
  title={Towards a practical programming language based on dependent type theory},
  author={Norell, Ulf},
  year={2007},
  school={Chalmers University of Technology}
}

@inproceedings{tutorial:agda,
  title={Dependently typed programming in Agda},
  author={Norell, Ulf},
  booktitle={International School on Advanced Functional Programming},
  pages={230--266},
  year={2008},
  organization={Springer}
}

@techreport{lang:racket,
  title       = {Reference: Racket},
  author      = {Matthew Flatt and PLT},
  number      = {PLT-TR-2010-1},
  institution = {PLT Design Inc.},
  year        = {2010},
  note        = {\url{https://racket-lang.org/tr1/}}
}

@article{lang:idris,
  title={{Idris, a general-purpose dependently typed programming language: Design and implementation}},
  author={Brady, Edwin},
  journal={Journal of Functional Programming},
  volume={23},
  number={05},
  pages={552--593},
  year={2013},
  publisher={Cambridge Univ Press}
}

@article{luo:coercive,
  title={Coercive subtyping},
  author={Luo, Zhaohui},
  journal={Journal of Logic and Computation},
  volume={9},
  number={1},
  pages={105--130},
  year={1999},
  publisher={Oxford University Press}
}


@manual{lang:coq,
author={{The Coq Development Team}},
title={{The Coq Proof Assistant Reference Manual}},
year=2008,
url={http://coq.inria.fr}}

@inproceedings{lang:lean,
  title={The Lean theorem prover (system description)},
  author={de Moura, Leonardo and Kong, Soonho and Avigad, Jeremy and Van Doorn, Floris and von Raumer, Jakob},
  booktitle={International Conference on Automated Deduction},
  pages={378--388},
  year={2015},
  organization={Springer}
}

@article{stump17a,
  author    = {Aaron Stump},
  title     = {The calculus of dependent lambda eliminations},
  journal   = {J. Funct. Program.},
  volume    = {27},
  pages     = {e14},
  year      = {2017},
}
                  
@article{stump18,
author={Aaron Stump},
title={{From Realizability to Induction via Dependent Intersection}},
journal={Ann. Pure Appl. Logic},
year=2018,                  
note={to appear}}


@article{Wells99,
  author    = {J. B. Wells},
  title     = {Typability and Type Checking in System {F} are Equivalent and Undecidable},
  journal   = {Ann. Pure Appl. Logic},
  volume    = {98},
  number    = {1-3},
  pages     = {111--156},
  year      = {1999},
}

@incollection{miquel01,
year={2001},
booktitle={{Typed Lambda Calculi and Applications (TLCA)}},
editor={Abramsky, Samson},
title={{The Implicit Calculus of Constructions Extending Pure Type Systems with an Intersection Type Binder and Subtyping}},
author={Miquel, Alexandre},
pages={344-359},
}
                  
@article{breitner+16,
  author    = {Joachim Breitner and
               Richard A. Eisenberg and
               Simon Peyton Jones and
               Stephanie Weirich},
  title     = {Safe zero-cost coercions for {H}askell},
  journal   = {J. Funct. Program.},
  volume    = {26},
  pages     = {e15},
  year      = {2016},
}

@article{barras:implicit,
  title={The implicit calculus of constructions as a programming language with dependent types},
  author={Barras, Bruno and Bernardo, Bruno},
  journal={Foundations of Software Science and Computational Structures},
  pages={365--379},
  year={2008},
  publisher={Springer}
}

@inproceedings{bernardy:color,
 author = {Bernardy, Jean-Philippe and Guilhem, Moulin},
 title = {Type-theory in Color},
 booktitle = {Proceedings of the 18th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '13},
 year = {2013},
 isbn = {978-1-4503-2326-0},
 location = {Boston, Massachusetts, USA},
 pages = {61--72},
 numpages = {12},
 doi = {10.1145/2500365.2500577},
 acmid = {2500577},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {erasure, parametricity, type-theory},
}

@inproceedings{ornaments:functional,
 author = {Dagand, Pierre-Evariste and McBride, Conor},
 title = {{Transporting Functions Across Ornaments}},
 booktitle = {Proceedings of the 17th ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP '12},
 year = {2012},
 isbn = {978-1-4503-1054-3},
 location = {Copenhagen, Denmark},
 pages = {103--114},
 numpages = {12},
 doi = {10.1145/2364527.2364544},
 acmid = {2364544},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {datatype, dependent types, ornament},
}

@inproceedings{dagand:interop,
 author = {Dagand, Pierre-Evariste and Tabareau, Nicolas and Tanter, \'{E}ric},
 title = {Partial Type Equivalences for Verified Dependent Interoperability},
 booktitle = {Proceedings of the 21st ACM SIGPLAN International Conference on Functional Programming},
 series = {ICFP 2016},
 year = {2016},
 isbn = {978-1-4503-4219-3},
 location = {Nara, Japan},
 pages = {298--310},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/2951913.2951933},
 doi = {10.1145/2951913.2951933},
 acmid = {2951933},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {dependent types, interoperability, type equivalences},
} 

@article{ornaments:original,
  title={Ornamental algebras, algebraic ornaments},
  author={McBride, Conor},
  year={2011},
  annote = "The author presents a principled method for constructing new types from old types using a datatype called an ornament. A new type may be related to an old type by subsuming its structure (e.g. the structure of a list subsumes the structure of a natural number), or by refining its index (e.g. a vector's natural number index refines a list's unit index). This construction comes with a generic forgetful function (called an ornamental algebra) that converts a value of an ornamented type to a value of the underlying type that was ornamented. The definition of ornaments in this paper is defined in terms of the universe of indexed families of types presented in \cite{Chapman:2010:GAL:1932681.1863547}."
}

@inproceedings{ornaments:relational,
  title={Relational algebraic ornaments},
  author={Ko, Hsiang-Shang and Gibbons, Jeremy},
  booktitle={Proceedings of the 2013 ACM SIGPLAN workshop on Dependently-typed programming},
  pages={37--48},
  year={2013},
  organization={ACM}
}

@inproceedings{geuvers01,
  author    = {Herman Geuvers},
  title     = {{Induction Is Not Derivable in Second Order Dependent Type
               Theory}},
  booktitle = {Typed Lambda Calculi and Applications (TLCA)},
  year      = {2001},
  pages     = {166-181},
}

@inproceedings{kopylov03,
  author    = {Alexei Kopylov},
  title     = {Dependent Intersection: {A} New Way of Defining Records in Type Theory},
  booktitle = {18th {IEEE} Symposium on Logic in Computer Science {(LICS)}},
  pages     = {86--95},
  year      = {2003},
}

@inproceedings{mcbride00,
  title={Elimination with a motive},
  author={McBride, Conor},
  booktitle={International Workshop on Types for Proofs and Programs},
  pages={197--216},
  year={2000},
  organization={Springer}
}

@inproceedings{firsov18a,
author={Denis Firsov and Aaron Stump},
title={{Generic Derivation of Induction for Impredicative Encodings in Cedille}},
booktitle={{Certified Programs and Proofs (CPP)}},
year=2018,
editor={June Andronick and Amy Felty}}

@misc{firsov18b,
author="Denis Firsov and Richard Blair and Aaron Stump",
title={{Efficient Mendler-Style Lambda-Encodings in Cedille}},
year=2018,
note="Under review for the International Conference on Interactive Theorem Proving as of March 16, 2018"}

@article{viewfromleft,
  title={The view from the left},
  author={McBride, Conor and McKinna, James},
  journal={Journal of functional programming},
  volume={14},
  number={1},
  pages={69--111},
  year={2004},
  publisher={Cambridge University Press}
}

